{"version":3,"sources":["components/VideoContent.js","components/VideoCard.js","components/LocalVideoCard.js","components/RemoteVideoCard.js","recoil/atoms.js","utils/GetContrastTextColor.js","utils/GetRandomTheme.js","components/RtcPc.js","components/MenuBar.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["VideoContent","media","videoRef","useRef","useEffect","MediaStream","current","srcObject","play","ref","width","height","autoplay","muted","controls","playsinline","makeStyles","theme","content","root","maxWidth","paddingTop","avatarColor","color","textColor","backgroundColor","expandOpen","transform","useStyles","LocalVideoCard","HandleRemoveRemoteMedia","classes","Card","className","CardHeader","avatar","Avatar","aria-label","name","length","split","substr","toUpperCase","initials","match","shift","pop","getIntials","title","action","local","IconButton","onClick","id","CardContent","RemoteVideoCard","titleName","outside","callerName","receiverName","console","log","LocalMedia","atom","key","default","RemoteMedia","dangerouslyAllowMutability","getRGB","c","parseInt","getsRGB","Math","pow","getLuminance","hexColor","String","getContrast","f","b","L1","L2","max","min","GetContrastTextColor","bgColor","GetRandomTheme","floor","random","toString","RtcPc","localMedia","debug","this","Id","Name","iceServer","mediaStream","pc","localSdp","remoteEvent","remoteStream","iceCandidates","iceCandidateComplete","setLocalDescription","bind","setRemoteDescription","handleCreateOfferError","handleCreateAnswerError","handleRemoteStreamAdded","handleRemoteStreamAddedWithResolve","handleRemoteStreamRemoved","handleIceCandidate","addIceCandidates","addStream","GenerateCall","GenerateAnswer","iceCandidateFinishedResolve","RTCPeerConnection","onicecandidate","event","onaddstream","onremovestream","e","message","alert","localStream","createOffer","then","createAnswer","remoteDescription","RTCSessionDescription","forEach","item","addIceCandidate","error","close","candidate","push","stream","resolve","sessionDescription","iceCandidateFinishedPromise","Promise","reject","createPeerConnection","createdOffer","pack","callId","uuid","v4","callerId","callerSpd","callerIce","sentPackJson","JSON","stringify","LZString","compressToBase64","repack","receiverId","receiverSpd","receiverIce","sentRepackJson","MenuBar","handleAddRemoteMedia","textField","marginLeft","marginRight","paddingBottom","marginTop","fontWeight","background","input","useState","setName","toSendStr","setToSentStr","recvStr","setRecvStr","useRecoilState","localMedias","setLocalMedia","remoteMedias","setRemoteMedia","setMedia","getMedia","a","navigator","mediaDevices","getUserMedia","audio","video","HandleStartStopButton","getTracks","track","stop","locMedia","temp","HandleLocalMedia","generate","constructor","newPc","sentPackCompStr","addbutton","parse","decompressFromBase64","notExecuteFull","tempAddRemoteStreamPromise","tempAddRemoteStreamResolver","remoteMedia","index","recevierId","sentRepackCompStr","AppBar","position","Toolbar","Grid","justify","container","spacing","alignItems","Button","variant","TextField","label","onChange","target","value","placeholder","InputProps","TextareaAutosize","rowsMin","rowsMax","text","filter","HandleRemoveLocalMedia","style","padding","mt","direction","xs","md","map","App","React","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"gRAEe,SAASA,EAAT,GAAgC,IAATC,EAAQ,EAARA,MAC5BC,EAAWC,mBAcjB,OAZAC,qBAAW,WAECH,aAAiBI,aACrBH,EAASI,QAAQC,UAAYN,EAC7BC,EAASI,QAAQE,QAEjBN,EAASI,QAAQC,UAAY,OAGjC,CAACN,IAID,2BAAOQ,IAAKP,EAAUQ,MAAM,MAAMC,OAAO,MAAOC,UAAQ,EAACC,OAAK,EAACC,UAAQ,EAACC,aAAW,GAAnF,KCPUC,aAAW,SAACC,EAAOC,GAAR,MAAqB,CAC9CC,KAAM,CACFC,SAAU,KAEdnB,MAAO,CACHU,OAAQ,EACRU,WAAY,UAEhBC,YAAa,CACTC,MAAO,SAACL,GAAD,OAAaA,EAAQD,MAAMO,WAGlCC,gBAAiB,SAACP,GAAD,OAAaA,EAAQD,MAAMQ,kBAGhDC,WAAY,CACRC,UAAW,sBAhBnB,ICAMC,EAAYZ,aAAW,SAACC,EAAOC,GAAR,MAAqB,CAC9CC,KAAM,CACFC,SAAU,KAEdnB,MAAO,CACHU,OAAQ,EACRU,WAAY,UAEhBC,YAAa,CACTC,MAAO,SAACL,GAAD,OAAaA,EAAQD,MAAMO,WAGlCC,gBAAiB,SAACP,GAAD,OAAaA,EAAQD,MAAMQ,kBAGhDC,WAAY,CACRC,UAAW,sBAkDJE,EA3CQ,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,wBAAyBZ,EAAc,EAAdA,QACzCa,EAAUH,EAAUV,GAe1B,OACI,6BAEI,kBAACc,EAAA,EAAD,CAAMC,UAAWF,EAAQZ,MACrB,kBAACe,EAAA,EAAD,CACIC,OACI,kBAACC,EAAA,EAAD,CAAQC,aAAW,SAASJ,UAAWF,EAAQT,aApBhD,SAACgB,GAChB,GAAqB,qBAAVA,EACP,MAAO,qBAEX,GAAIA,EAAKC,QAAU,EACf,OAAOD,EACJ,GAAIA,EAAKE,MAAM,KAAKD,OAAS,EAChC,OAAOD,EAAKG,OAAO,EAAE,GAAGC,cAExB,IAAIC,EAAWL,EAAKM,MAAM,UAAY,GACtC,QAASD,EAASE,SAAW,KAAOF,EAASG,OAAS,KAAKJ,cAW1CK,CAAW7B,EAAQoB,OAG5BU,MAAO9B,EAAQoB,KAAO,UACtBW,OAAS/B,EAAQjB,OAASiB,EAAQgC,MAAS,KAC3B,kBAACC,EAAA,EAAD,CAAYd,aAAW,WAAWe,QAAS,kBAAMtB,EAAwBZ,EAAQmC,MAC7E,kBAAC,IAAD,SAKxB,kBAACC,EAAA,EAAD,KACI,kBAACtD,EAAD,CAAcC,MAAOiB,EAAQjB,YC1D3C2B,EAAYZ,aAAW,SAACC,EAAOC,GAAR,MAAqB,CAC9CC,KAAM,CACFC,SAAU,KAEdnB,MAAO,CACHU,OAAQ,EACRU,WAAY,UAEhBC,YAAa,CACTC,MAAO,SAACL,GAAD,OAAaA,EAAQD,MAAMO,WAGlCC,gBAAiB,SAACP,GAAD,OAAaA,EAAQD,MAAMQ,kBAGhDC,WAAY,CACRC,UAAW,sBAgDJ4B,EAzCS,SAAC,GAA0C,IAAxCzB,EAAuC,EAAvCA,wBAAyBZ,EAAc,EAAdA,QAC1Ca,EAAUH,EAAUV,GActBsC,EAAYtC,EAAQuC,QAAUvC,EAAQwC,WAAaxC,EAAQyC,aAE/D,OADAC,QAAQC,IAAI,sBAAuB3C,EAAQsC,GAEvC,6BAEI,kBAACxB,EAAA,EAAD,CAAMC,UAAWF,EAAQZ,MACrB,kBAACe,EAAA,EAAD,CACIC,OACI,kBAACC,EAAA,EAAD,CAAQC,aAAW,SAASJ,UAAWF,EAAQT,aArBhD,SAACgB,GAChB,GAAqB,qBAAVA,EACP,MAAO,qBAEX,GAAIA,EAAKC,QAAU,EACf,OAAOD,EACJ,GAAIA,EAAKE,MAAM,KAAKD,OAAS,EAChC,OAAOD,EAAKG,OAAO,EAAE,GAAGC,cAExB,IAAIC,EAAWL,EAAKM,MAAM,UAAY,GACtC,QAASD,EAASE,SAAW,KAAOF,EAASG,OAAS,KAAKJ,cAYzCK,CAAWS,IAGrBR,MAAOQ,EACPP,OAAW,kBAACE,EAAA,EAAD,CAAYd,aAAW,WAAWe,QAAS,kBAAMtB,EAAwBZ,EAAQmC,MACxE,kBAAC,IAAD,SAGxB,kBAACC,EAAA,EAAD,KACI,kBAACtD,EAAD,CAAcC,MAAOiB,EAAQjB,Y,sFCvDpC6D,GAVeC,eAAK,CAC7BC,IAAK,eACLC,QAAS,IAGaF,eAAK,CAC3BC,IAAK,aACLC,QAAS,KAGaF,eAAK,CAC3BC,IAAK,aACLC,QAAS,MAIAC,EAAcH,eAAK,CAC5BC,IAAK,cACLC,QAAS,GACTE,4BAA6B,I,iBCrBjC,SAASC,EAAOC,GACZ,OAAOC,SAASD,EAAG,KAAOA,EAG9B,SAASE,EAAQF,GACb,OAAOD,EAAOC,GAAK,KAAO,OACpBD,EAAOC,GAAK,IAAM,MAClBG,KAAKC,KAAKL,EAAOC,GAAK,IAAM,MAAS,MAAO,KAGtD,SAASK,EAAaC,GAElB,MACI,MAASJ,GAFbI,EAAWC,OAAOD,IAEYlC,OAAO,EAAG,IACpC,MAAS8B,EAAQI,EAASlC,OAAO,EAAG,IACpC,MAAS8B,EAAQI,EAASlC,QAAQ,IAI1C,SAASoC,EAAYC,EAAGC,GACpB,IAAMC,EAAKN,EAAaI,GAClBG,EAAKP,EAAaK,GACxB,OAAQP,KAAKU,IAAIF,EAAIC,GAAM,MAAST,KAAKW,IAAIH,EAAIC,GAAM,KAS5CG,MANf,SAA8BC,GAI1B,OAHsBR,EAAYQ,EAAS,WACrBR,EAAYQ,EAAS,WAEJ,UAAY,WCrBxCC,EANQ,WAEnB,IAAI/D,EAAO,IAAMiD,KAAKe,MAAoB,SAAdf,KAAKgB,UAAmBC,SAAS,IAC7D,MAAO,CAAEhE,gBAAkBF,EAAQC,UAAW4D,EAAqB7D,K,iCCDlDmE,E,WAEjB,aAA2D,IAA5BC,EAA2B,uCAAfC,EAAe,4EAEtDC,KAAKC,GAAKH,EAAWtC,GACrBwC,KAAKE,KAAOJ,EAAWrD,KACvBuD,KAAKG,UAAY,CAAC,WAAc,CAAC,CAAC,KAAQ,kCAC1CH,KAAKI,YAAcN,EAAW1F,MAC9B4F,KAAKK,GAAK,KACVL,KAAKD,MAAQA,EACbC,KAAKM,SAAW,KAChBN,KAAKO,YAAc,KACnBP,KAAKQ,aAAe,KACpBR,KAAKS,cAAgB,GACrBT,KAAKU,sBAAuB,EAE5BV,KAAKW,oBAAsBX,KAAKW,oBAAoBC,KAAKZ,MACzDA,KAAKa,qBAAuBb,KAAKa,qBAAqBD,KAAKZ,MAE3DA,KAAKc,uBAAyBd,KAAKc,uBAAuBF,KAAKZ,MAC/DA,KAAKe,wBAA0Bf,KAAKe,wBAAwBH,KAAKZ,MAGjEA,KAAKgB,wBAA0BhB,KAAKgB,wBAAwBJ,KAAKZ,MACjEA,KAAKiB,mCAAoCjB,KAAKiB,mCAAmCL,KAAKZ,MAEtFA,KAAKkB,0BAA4BlB,KAAKkB,0BAA0BN,KAAKZ,MAErEA,KAAKmB,mBAAqBnB,KAAKmB,mBAAmBP,KAAKZ,MAEvDA,KAAKoB,iBAAmBpB,KAAKoB,iBAAiBR,KAAKZ,MAEnDA,KAAKqB,UAAYrB,KAAKqB,UAAUT,KAAKZ,MACrCA,KAAKsB,aAAetB,KAAKsB,aAAaV,KAAKZ,MAC3CA,KAAKuB,eAAgBvB,KAAKuB,eAAeX,KAAKZ,M,iEAK7BwB,GAA8B,IAAD,OAC9C,IACIxB,KAAKK,GAAK,IAAIoB,kBAAkBzB,KAAKG,WACrCH,KAAKK,GAAGqB,eAAiB,SAACC,GAAD,OAAW,EAAKR,mBAAmBQ,EAAMH,IAClExB,KAAKK,GAAGuB,YAAc5B,KAAKgB,wBAC3BhB,KAAKK,GAAGwB,eAAiB7B,KAAKkB,0BAC9BnD,QAAQC,IAAI,8BACd,MAAO8D,GAGL,OAFA/D,QAAQC,IAAI,+CAAiD8D,EAAEC,cAC/DC,MAAM,8C,4JAQJhC,KAAKK,GAAGgB,UAAUrB,KAAKI,a,OAC7BrC,QAAQC,IAAI,6DAA8DgC,KAAKiC,a,4PAM/ElE,QAAQC,IAAI,kB,SACNgC,KAAKK,GAAG6B,cAAcC,KAAKnC,KAAKW,oBAAoBX,KAAKc,wB,4PAK/D/C,QAAQC,IAAI,2B,SACNgC,KAAKK,GAAG+B,eAAeD,KAAMnC,KAAKW,oBAAsBX,KAAKe,yB,0LAK5CsB,G,wEACvBtE,QAAQC,IAAIqE,G,SACNrC,KAAKK,GAAGQ,qBAAqB,IAAIyB,sBAAsBD,I,uLAO1C5B,G,mFACnB1C,QAAQC,IAAI,kDAAmDyC,G,SACzDA,EAAc8B,SAAQ,SAACC,GACzB,IACIzE,QAAQC,IAAIwE,GACX,EAAKnC,GAAGoC,gBAAgBD,GAC3B,MAAOV,GACL/D,QAAQ2E,MAAM,sCAAuCZ,O,+HAO7D9B,KAAKK,GAAGsC,U,yCAKOhB,EAAMH,GAErBzD,QAAQC,IAAI,uBAAwB2D,GAChCA,EAAMiB,UACN5C,KAAKS,cAAcoC,KAAKlB,EAAMiB,YAE9B7E,QAAQC,IAAI,sBACZwD,GAA4B,M,8CAIZG,GACpB5D,QAAQC,IAAI,wBACZD,QAAQC,IAAI2D,GACZ3B,KAAKO,YAAcoB,EACnB3B,KAAKQ,aAAemB,EAAMmB,S,yDAEKnB,EAAOoB,GACtChF,QAAQC,IAAI,wBACZD,QAAQC,IAAI2D,GACZ3B,KAAKO,YAAcoB,EACnB3B,KAAKQ,aAAemB,EAAMmB,OAC1BC,GAAQ,K,gDAGcpB,GACtB5D,QAAQC,IAAI,iCAAkC2D,K,0CAG9BqB,GAChBhD,KAAKK,GAAGM,oBAAoBqC,GAC5BhD,KAAKM,SAAW0C,EAChBjF,QAAQC,IAAI,4BAA6BgF,K,6CAGtBrB,GACnB5D,QAAQC,IAAI,wBAAyB2D,K,8CAGjBe,GACpB3E,QAAQC,IAAI,wCAA0C0E,EAAM9C,c,kKAOtDqD,EAA+B,IAAIC,SAAS,SAASH,EAASI,GAAU3B,EAA8BuB,EAAuCI,KAEnJnD,KAAKoD,qBAAqB5B,G,SACpBxB,KAAKqB,Y,uBACLrB,KAAKqD,e,uBACUJ,E,cACJ,I,SACbK,EAAO,CACHC,OAAUC,IAAKC,KACfC,SAAW1D,KAAKC,GAChBpC,WAAYmC,KAAKE,KACjByD,UAAY3D,KAAKM,SACjBsD,UAAY5D,KAAKS,gBAGrBoD,EAAeC,KAAKC,UAAL,2BAAoBT,GAApB,IAA0B1F,SAAQ,KACrD0F,EAAI,2BAAQA,GAAR,IAAc1F,SAAQ,EAAOxC,MAAOqE,M,kBAClC,CAAE6D,EAAMU,IAASC,iBAAiBJ,K,qLAGvBP,G,oFAGXL,EAA+B,IAAIC,SAAS,SAASH,EAASI,GAAU3B,EAA8BuB,EAAuCI,KACnJnD,KAAKoD,qBAAqB5B,G,SACpBxB,KAAKqB,Y,uBACLrB,KAAKa,qBAAqByC,EAAKK,W,uBAC/B3D,KAAKoC,e,wBACUa,E,eACJ,I,SACjBiB,EAAM,2BACKZ,GADL,IAEEa,WAAWnE,KAAKC,GAChBnC,aAAakC,KAAKE,KAClBkE,YAAYpE,KAAKM,SACjB+D,YAAYrE,KAAKS,iB,UAInBT,KAAKoB,iBAAiBkC,EAAKM,W,eAE7BU,EAAiBR,KAAKC,UAAUG,GACpCA,EAAM,2BAAQA,GAAR,IAAiB9I,MAAOqE,M,kBACvB,CAAEyE,EAAQF,IAASC,iBAAiBK,K,uHC4BpCC,EA1LC,SAAC,GAA8B,EAA5BC,qBAA6B,IAEtCtI,EAzBe,CACrBuI,UAAW,CACP5J,MAAO,MACP6J,WAAY,OACZC,YAAa,OACbC,cAAe,EACfC,UAAW,EACXC,WAAY,IACZC,WAAY,QACZrJ,MAAO,SAEXsJ,MAAO,CACHtJ,MAAO,QACPqJ,WAAY,UAU2B,EAGnBE,mBAAS,MAHU,mBAGpCxI,EAHoC,KAG9ByI,EAH8B,OAITD,mBAAS,IAJA,mBAIpCE,EAJoC,KAIzBC,EAJyB,OAKbH,mBAAS,IALI,mBAKpCI,EALoC,KAK3BC,EAL2B,OAONC,yBAAetH,GAPT,mBAOpCuH,EAPoC,KAOvBC,EAPuB,OAQJF,yBAAelH,GARX,mBAQpCqH,EARoC,KAQtBC,EARsB,OASjBV,mBAAS,MATQ,mBASpC7K,EAToC,KAS7BwL,EAT6B,KAarCC,EAAQ,uCAAG,4BAAAC,EAAA,sEACOC,UAAUC,aAAaC,aAAa,CACpDC,OAAO,EACPC,OAAO,IAHE,OACP/L,EADO,OAKbwL,EAASxL,GALI,2CAAH,qDAeRgM,EAAwB,WACtBhM,aAAiBI,aAPjBJ,aAAiBI,aACjBJ,EAAMiM,YAAY9D,SAAQ,SAAA+D,GAAK,OAAIA,EAAMC,UAE7CX,EAAS,OAQLC,KAsBRtL,qBAAU,kBAlBe,WACrB,GAAIiL,EAAY9I,OAAS,EAAG,CACxB,IAAI8J,EAAW,CACXhJ,GAAIgG,IAAKC,KACThH,OACArB,MAAOqE,IACPrF,QACAiD,OAAO,GAEXoI,EAAc,CAACe,QAEZ,CACH,IAAIC,EAAOjB,EAAY,GACvBC,EAAc,CAAC,2BAAKgB,GAAN,IAAYhK,OAAMrC,aAKxBsM,KAAoB,CAACjK,EAAMrC,IAE3C,IAAMuM,EAAQ,uCAAG,WAAOnB,GAAP,uBAAAM,EAAA,2DACRN,EAAY9I,OAAS,GAAO8I,EAAY,GAAGpL,OADnC,oBAET2D,QAAQC,IAAIwH,EAAY,GAAGpL,MAAMwM,YAAYnK,MACC,gBAA1C+I,EAAY,GAAGpL,MAAMwM,YAAYnK,KAH5B,wBAIDoK,EAAQ,IAAIhH,EAAM,KAAM2F,EAAY,IAAI,GAJvC,SAK+BqB,EAAMvF,eALrC,mCAKAgC,EALA,KAKMwD,EALN,KAMLnB,EAAe,GAAD,mBAAKD,GAAL,aAAC,eAAuBpC,GAAxB,IAA8BzD,MAAOgH,EAAOzM,MAAOyM,EAAMrG,kBACvE4E,EAAa0B,GACb/I,QAAQC,IAAIsF,EAAMwD,GARb,wBAUL9E,MAAM,uCACNjE,QAAQC,IAAI,uCAXP,gCAcTgE,MAAM,uCACNjE,QAAQC,IAAI,uCAfH,4CAAH,sDAyBR+I,EAAS,uCAAG,WAAOvB,EAAaE,GAApB,+BAAAI,EAAA,yDACVxC,EAAOQ,KAAKkD,MAAMhD,IAASiD,qBAAqB5B,IAChD6B,GAAiB,EAEjBC,EAA6B,IAAIjE,SAAQ,SAACH,EAASI,GAAaiE,EAA8BrE,KAClG2C,EAAanD,QAAb,uCAAqB,WAAO8E,EAAaC,GAApB,SAAAxB,EAAA,yDACbuB,EAAY3D,WAAaJ,EAAKI,SADjB,uBAEbwD,GAAiB,EACjBG,EAAYxH,MAAMQ,GAAGuB,YAAc,SAACD,GAAD,OAAW0F,EAAYxH,MAAMoB,mCAAmCU,EAAOyF,IAC1GC,EAAYxH,MAAMgB,qBAAqByC,EAAKc,aAC5CiD,EAAYxH,MAAMuB,iBAAiBkC,EAAKe,aAL3B,SAMK8C,EANL,gBAQTE,EAAW,2BACJA,GADI,IAEPE,WAAYjE,EAAKa,WACjBrG,aAAcwF,EAAKxF,aACnBuG,YAAaf,EAAKe,YAClBD,YAAad,EAAKc,YAClBhK,MAAOiN,EAAYxH,MAAMW,eAE7BkF,EAAa4B,GAASD,GAhBb,2CAArB,0DAoBuB,IAAnBH,EAzBU,gCA0BQC,EA1BR,eA4BNxB,EAAeD,GA5BT,WA+BS,IAAnBwB,EA/BU,sBAgCL1B,EAAY9I,OAAS,GAAO8I,EAAY,GAAGpL,OAhCtC,oBAiCwC,gBAA1CoL,EAAY,GAAGpL,MAAMwM,YAAYnK,KAjC/B,wBAkCEoK,EAAQ,IAAIhH,EAAM,KAAM2F,EAAY,IAAI,GAlC1C,UAmCwCqB,EAAMtF,eAAe+B,GAnC7D,oCAmCKY,EAnCL,KAmCasD,EAnCb,KAoCF7B,EAAe,GAAD,mBAAKD,GAAL,aAAC,eAAuBxB,GAAxB,IAAgCrE,MAAOgH,EAAOzM,MAAOyM,EAAMrG,kBACzE4E,EAAaoC,GACbzJ,QAAQC,IAAIkG,EAAQsD,GAtClB,wBAyCFxF,MAAM,kCACNjE,QAAQC,IAAI,kCA1CV,gCA6CNgE,MAAM,kCACNjE,QAAQC,IAAI,kCA9CN,QAiDdD,QAAQC,IAAI,aAAc0H,GAjDZ,4CAAH,wDAwDf,OACI,kBAAC+B,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,QAAQ,gBAAgBC,WAAS,EAACC,QAAS,IAC7C,kBAACH,EAAA,EAAD,CAAMpF,MAAI,EAACqF,QAAQ,SAASG,WAAW,UACnC,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAY3K,QAAS,kBAAM6I,MAA3C,IAAuEhM,EAAQ,OAAS,QAAxF,MACA,kBAAC+N,EAAA,EAAD,CACI3K,GAAG,OACH0K,QAAQ,SACRE,MAAM,OACNhM,UAAWF,EAAQuI,UACnB4D,SAAU,SAACvG,GAAD,OAAOoD,EAAQpD,EAAEwG,OAAOC,QAElCC,YAAY,kBACZC,WAAY,CACRrM,UAAWF,EAAQ8I,SAG3B,kBAACiD,EAAA,EAAD,CAAQC,QAAQ,YAAY3K,QAAS,WA9ErDoJ,EAASnB,KA8EO,aACA,kBAACkD,EAAA,EAAD,CACIlM,aAAW,iBACXmM,QAAS,EACTC,QAAS,EACTJ,YAAY,GACZD,MAAOpD,IAEX,kBAAC,kBAAD,CAAiB0D,KAAM1D,GACnB,kBAAC8C,EAAA,EAAD,CAAQC,QAAQ,aAAhB,WAGR,kBAACN,EAAA,EAAD,CAAMpF,MAAI,EAACqF,QAAQ,SAASG,WAAW,UACnC,kBAACU,EAAA,EAAD,CACIlM,aAAW,iBACXmM,QAAS,EACTC,QAAS,EACTJ,YAAY,aACZH,SAAU,SAACvG,GAAQwD,EAAWxD,EAAEwG,OAAOC,OAAQxK,QAAQC,IAAIqH,IAC3DkD,MAAOlD,IAEX,kBAAC4C,EAAA,EAAD,CAAQC,QAAQ,YAAY3K,QAAS,WAAQQ,QAAQC,IAAIqH,GA1CzE0B,EAAUvB,EAAaE,KA0CP,aCxMT,SAASvL,IAAe,MAEIoL,yBAAelH,GAFnB,mBAE5BqH,EAF4B,KAEdC,EAFc,OAGEJ,yBAAetH,GAHjB,mBAG5BuH,EAH4B,KAGfC,EAHe,KAM7BxJ,EAA0B,SAACuB,GAC7BmI,GAAe,SAACD,GAAD,OAAkBA,EAAaoD,QAAO,SAAAzB,GAAW,OAAIA,EAAY7J,KAAOA,SAErFuL,EAAyB,SAACvL,GAC5BiI,GAAc,SAACD,GAAD,OAAiBA,EAAYsD,QAAO,SAAAhJ,GAAU,OAAIA,EAAWtC,KAAOA,SAItF,OACI,6BACI,kBAAC,EAAD,CAASgH,qBAAsB,kBAAMmB,EAAe,GAAD,mBAAKD,GAAL,CAnBpD,CAAElI,GAAIgG,IAAKC,KAAMhH,KAAM,YAAarB,MAAOqE,WAoB1C,yBAAKuJ,MAAO,CAAEC,QAAS,KACnB,kBAACrB,EAAA,EAAD,CACIsB,GAAI,GACJpB,WAAS,EACTC,QAAS,GACToB,UAAU,MACVtB,QAAQ,SACRG,WAAW,UAGX,kBAACJ,EAAA,EAAD,CACIpF,MAAI,EACJ4G,GAAI,GACJC,GAAI,GACJF,UAAU,MACVtB,QAAQ,SACRG,WAAW,UAEX,kBAACJ,EAAA,EAAD,CACIE,WAAS,EACTqB,UAAU,MACVtB,QAAQ,SACRG,WAAW,SACXD,QAAS,IAERvC,EAAY8D,KAAI,SAACxJ,GAAD,OACb,kBAAC8H,EAAA,EAAD,CAAMzJ,IAAK,EAAGqE,MAAI,GACd,kBAAC,EAAD,CACIhF,GAAIsC,EAAWtC,GACfvB,wBAA0B8M,EAC1B1N,QAASyE,QAKpB4F,EAAa4D,KAAI,SAACjC,GAAD,OACd,kBAACO,EAAA,EAAD,CAAMzJ,IAAK,EAAGqE,MAAI,GACd,kBAAC,EAAD,CACIhF,GAAI6J,EAAY9D,OAChBtH,wBAA0BA,EAC1BZ,QAASgM,aCxDlCkC,MAXf,WAAgB,IAAD,EACKC,IAAMvE,SAAS,GACjC,OAFa,oBAGX,kBAAC,aAAD,KACE,6BACE,kBAAC,EAAD,SCCYwE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7M,MACvB,2DCZN8M,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBlE,WACrBA,UAAUmE,cAAcC,MACrBhI,MAAK,SAAAiI,GACJA,EAAaC,gBAEdC,OAAM,SAAA5H,GACL3E,QAAQ2E,MAAMA,EAAMX,a","file":"static/js/main.956a66af.chunk.js","sourcesContent":["import React, { useRef , useEffect } from 'react';\r\n\r\nexport default function VideoContent({media}) {\r\n    const videoRef = useRef();\r\n\r\n    useEffect( () =>  { \r\n\r\n            if (media instanceof MediaStream) {\r\n            videoRef.current.srcObject = media; \r\n            videoRef.current.play();\r\n            } else {\r\n            videoRef.current.srcObject = null; \r\n            }\r\n        } , \r\n        [media] \r\n    )  \r\n\r\n    return (\r\n        <video ref={videoRef} width=\"320\" height=\"240\"  autoplay muted controls playsinline   > </video>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport VideoContent from './VideoContent';\r\n\r\nconst useStyles = makeStyles((theme, content) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    avatarColor: {\r\n        color: (content) => content.theme.textColor,\r\n        // color: theme.palette.getContrastText( (content) =>  content.color  ),\r\n\r\n        backgroundColor: (content) => content.theme.backgroundColor,\r\n    },\r\n\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n\r\n}));\r\n\r\n\r\n\r\nconst VideoCard = ({ HandleRemoveRemoteMedia, content }) => {\r\n    const classes = useStyles(content);\r\n    const getIntials = (name) => {\r\n        if (typeof name ===  'undefined') {\r\n            return \"WaitingForResponse\"\r\n        }\r\n        if (name.length <= 2)  {\r\n            return name\r\n        } else if (name.split(\" \").length < 2) { \r\n            return name.substr(0,2).toUpperCase()\r\n        } else {\r\n            var initials = name.match(/\\b\\w/g) || [];\r\n            return ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Avatar aria-label=\"recipe\" className={classes.avatarColor}  >\r\n                            {getIntials(content.name)}\r\n                        </Avatar>\r\n                    }\r\n                    title={content.name}\r\n                    action={ content.media && content.local ?  null  : \r\n                                    <IconButton aria-label=\"settings\" onClick={() => HandleRemoveRemoteMedia(content.id)} >\r\n                                        <CloseIcon/>\r\n                                    </IconButton>\r\n                                    \r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <VideoContent media={content.media}/>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default VideoCard","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport VideoContent from './VideoContent';\r\n\r\nconst useStyles = makeStyles((theme, content) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    avatarColor: {\r\n        color: (content) => content.theme.textColor,\r\n        // color: theme.palette.getContrastText( (content) =>  content.color  ),\r\n\r\n        backgroundColor: (content) => content.theme.backgroundColor,\r\n    },\r\n\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n\r\n}));\r\n\r\n\r\n\r\nconst LocalVideoCard = ({ HandleRemoveRemoteMedia, content }) => {\r\n    const classes = useStyles(content);\r\n    const getIntials = (name) => {\r\n        if (typeof name ===  'undefined') {\r\n            return \"WaitingForResponse\"\r\n        }\r\n        if (name.length <= 2)  {\r\n            return name\r\n        } else if (name.split(\" \").length < 2) { \r\n            return name.substr(0,2).toUpperCase()\r\n        } else {\r\n            var initials = name.match(/\\b\\w/g) || [];\r\n            return ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Avatar aria-label=\"recipe\" className={classes.avatarColor}  >\r\n                            {getIntials(content.name)}\r\n                        </Avatar>\r\n                    }\r\n                    title={content.name + \"  (YOU)\"} \r\n                    action={ content.media && content.local ?  null  : \r\n                                    <IconButton aria-label=\"settings\" onClick={() => HandleRemoveRemoteMedia(content.id)} >\r\n                                        <CloseIcon/>\r\n                                    </IconButton>\r\n                                    \r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <VideoContent media={content.media}/>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default LocalVideoCard","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport VideoContent from './VideoContent';\r\n\r\nconst useStyles = makeStyles((theme, content) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    avatarColor: {\r\n        color: (content) => content.theme.textColor,\r\n        // color: theme.palette.getContrastText( (content) =>  content.color  ),\r\n\r\n        backgroundColor: (content) => content.theme.backgroundColor,\r\n    },\r\n\r\n    expandOpen: {\r\n        transform: 'rotate(180deg)',\r\n    },\r\n\r\n}));\r\n\r\n\r\n\r\nconst RemoteVideoCard = ({ HandleRemoveRemoteMedia, content }) => {\r\n    const classes = useStyles(content);\r\n    const getIntials = (name) => {\r\n        if (typeof name ===  'undefined') {\r\n            return \"WaitingForResponse\"\r\n        }\r\n        if (name.length <= 2)  {\r\n            return name\r\n        } else if (name.split(\" \").length < 2) { \r\n            return name.substr(0,2).toUpperCase()\r\n        } else {\r\n            var initials = name.match(/\\b\\w/g) || [];\r\n            return ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\r\n        }\r\n    }\r\n    let titleName = content.outside ? content.callerName : content.receiverName\r\n    console.log(\"here =============>\", content,titleName)\r\n    return (\r\n        <div>\r\n            \r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Avatar aria-label=\"recipe\" className={classes.avatarColor}  >\r\n                            { getIntials(titleName) }\r\n                        </Avatar>\r\n                    }\r\n                    title={titleName }\r\n                    action={   <IconButton aria-label=\"settings\" onClick={() => HandleRemoveRemoteMedia(content.id)} >\r\n                                        <CloseIcon/>\r\n                                </IconButton> }\r\n                />\r\n                <CardContent>\r\n                    <VideoContent media={content.media}/>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default RemoteVideoCard","import { atom } from \"recoil\";\r\n\r\nexport const counterState = atom({\r\n    key: 'counterState',\r\n    default: 0,\r\n});\r\n\r\nexport const videoState = atom({\r\n    key: 'videoState',\r\n    default: [] ,\r\n});\r\n\r\nexport const LocalMedia = atom({\r\n    key: 'LocalMedia',\r\n    default: [] ,\r\n});\r\n\r\n\r\nexport const RemoteMedia = atom({\r\n    key: 'RemoteMedia',\r\n    default: [] ,\r\n    dangerouslyAllowMutability : true\r\n});","function getRGB(c) {\r\n    return parseInt(c, 16) || c\r\n}\r\n\r\nfunction getsRGB(c) {\r\n    return getRGB(c) / 255 <= 0.03928\r\n        ? getRGB(c) / 255 / 12.92\r\n        : Math.pow((getRGB(c) / 255 + 0.055) / 1.055, 2.4)\r\n}\r\n\r\nfunction getLuminance(hexColor) {\r\n    hexColor = String(hexColor)\r\n    return (\r\n        0.2126 * getsRGB(hexColor.substr(1, 2)) +\r\n        0.7152 * getsRGB(hexColor.substr(3, 2)) +\r\n        0.0722 * getsRGB(hexColor.substr(-2))\r\n    )\r\n}\r\n\r\nfunction getContrast(f, b) {\r\n    const L1 = getLuminance(f)\r\n    const L2 = getLuminance(b)\r\n    return (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05)\r\n}\r\n\r\nfunction GetContrastTextColor(bgColor) {\r\n    const whiteContrast = getContrast(bgColor, '#ffffff')\r\n    const blackContrast = getContrast(bgColor, '#000000')\r\n\r\n    return whiteContrast > blackContrast ? '#ffffff' : '#000000'\r\n}\r\nexport default GetContrastTextColor","import GetContrastTextColor from \"./GetContrastTextColor\"\r\n\r\nconst GetRandomTheme = () => {\r\n    // return 'rgb(' + (Math.floor(Math.random() * 256)) + ',' + (Math.floor(Math.random() * 256)) + ',' + (Math.floor(Math.random() * 256)) + ')';\r\n    var color ='#' + Math.floor(Math.random()*16777215).toString(16)\r\n    return { backgroundColor : color , textColor: GetContrastTextColor(color)}\r\n}\r\n\r\nexport default GetRandomTheme","import LZString from 'lz-string';\r\nimport GetRandomTheme from \"../utils/GetRandomTheme\"\r\nimport uuid from \"uuid\";\r\n\r\nexport default class RtcPc {\r\n\r\n    constructor(iceServer = null , localMedia, debug = false) {\r\n        \r\n        this.Id = localMedia.id;\r\n        this.Name = localMedia.name;\r\n        this.iceServer = {'iceServers': [{'urls': 'stun:stun.l.google.com:19302'}]};\r\n        this.mediaStream = localMedia.media;\r\n        this.pc = null;\r\n        this.debug = debug;\r\n        this.localSdp = null \r\n        this.remoteEvent = null;\r\n        this.remoteStream = null ;\r\n        this.iceCandidates = [] ;\r\n        this.iceCandidateComplete = false\r\n\r\n        this.setLocalDescription = this.setLocalDescription.bind(this);\r\n        this.setRemoteDescription = this.setRemoteDescription.bind(this);\r\n\r\n        this.handleCreateOfferError = this.handleCreateOfferError.bind(this);\r\n        this.handleCreateAnswerError = this.handleCreateAnswerError.bind(this);\r\n        \r\n        \r\n        this.handleRemoteStreamAdded = this.handleRemoteStreamAdded.bind(this);\r\n        this.handleRemoteStreamAddedWithResolve= this.handleRemoteStreamAddedWithResolve.bind(this);\r\n\r\n        this.handleRemoteStreamRemoved = this.handleRemoteStreamRemoved.bind(this)\r\n        \r\n        this.handleIceCandidate = this.handleIceCandidate.bind(this)\r\n        \r\n        this.addIceCandidates = this.addIceCandidates.bind(this);\r\n\r\n        this.addStream = this.addStream.bind(this);\r\n        this.GenerateCall = this.GenerateCall.bind(this);\r\n        this.GenerateAnswer= this.GenerateAnswer.bind(this)\r\n\r\n    }\r\n\r\n    // Step - 1 Create Peer Connection \r\n    createPeerConnection(iceCandidateFinishedResolve) {\r\n        try {\r\n            this.pc = new RTCPeerConnection(this.iceServer);\r\n            this.pc.onicecandidate = (event) => this.handleIceCandidate(event,iceCandidateFinishedResolve);\r\n            this.pc.onaddstream = this.handleRemoteStreamAdded;\r\n            this.pc.onremovestream = this.handleRemoteStreamRemoved;\r\n            console.log('Created RTCPeerConnnection');\r\n        } catch (e) {\r\n            console.log('Failed to create PeerConnection, exception: ' + e.message);\r\n            alert('Cannot create RTCPeerConnection object.');\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    // Step - 2 Add stream to peer connection \r\n    async addStream() {\r\n        await this.pc.addStream(this.mediaStream);\r\n        console.log('added Local stream to the peer connection - localstream - ', this.localStream);\r\n    }\r\n\r\n\r\n    // Step - 3  If caller - Create offer \r\n    async createdOffer() {\r\n        console.log(\"creating offer\")\r\n        await this.pc.createOffer().then(this.setLocalDescription,this.handleCreateOfferError);\r\n    }\r\n\r\n    // Step - 4    If recevier - Create offer or CreateAnswer\r\n    async createAnswer() {\r\n        console.log('Sending answer to peer.');\r\n        await this.pc.createAnswer().then( this.setLocalDescription,  this.handleCreateAnswerError);\r\n    }\r\n\r\n    // Step -3 If recevier - set Remote desritpion,\r\n    // Step - 5 if caller -  set Remote desritpion,\r\n    async setRemoteDescription(remoteDescription) {\r\n        console.log(remoteDescription)\r\n        await this.pc.setRemoteDescription(new RTCSessionDescription(remoteDescription));\r\n    }\r\n\r\n\r\n\r\n    // Step -4 If recevier - set Remote desritpion,\r\n    // Step - 6 if caller -  set Remote desritpion,\r\n    async addIceCandidates(iceCandidates) {\r\n        console.log(\"receiverSetCallerIceCand  iceCandidateOfCaller-\", iceCandidates)\r\n        await iceCandidates.forEach((item) => {\r\n            try {\r\n                console.log(item)\r\n                 this.pc.addIceCandidate(item);\r\n            } catch (e) {\r\n                console.error('Error adding received ice candidate', e);\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    stop() {\r\n        this.pc.close();\r\n    }\r\n\r\n\r\n    // Call the call back and support function \r\n    handleIceCandidate(event,iceCandidateFinishedResolve) {\r\n        // console.log(\"message - \", message)\r\n        console.log('icecandidate event: ', event);\r\n        if (event.candidate) {\r\n            this.iceCandidates.push(event.candidate)\r\n        } else {\r\n            console.log('End of candidates.');\r\n            iceCandidateFinishedResolve(true)\r\n        }\r\n    }\r\n\r\n    handleRemoteStreamAdded(event) {\r\n        console.log('Remote stream added.');\r\n        console.log(event)\r\n        this.remoteEvent = event;\r\n        this.remoteStream = event.stream;\r\n    }\r\n    handleRemoteStreamAddedWithResolve(event, resolve) {\r\n        console.log('Remote stream added.');\r\n        console.log(event)\r\n        this.remoteEvent = event;\r\n        this.remoteStream = event.stream;\r\n        resolve(true)\r\n    }\r\n\r\n    handleRemoteStreamRemoved(event) {\r\n        console.log('Remote stream removed. Event: ', event);\r\n    }\r\n\r\n    setLocalDescription(sessionDescription) {\r\n        this.pc.setLocalDescription(sessionDescription);\r\n        this.localSdp = sessionDescription\r\n        console.log('Local- sessionDescription', sessionDescription);\r\n    }   \r\n\r\n    handleCreateOfferError(event) {\r\n        console.log('createOffer() error: ', event);\r\n    }\r\n\r\n    handleCreateAnswerError(error) {\r\n        console.log('Failed to create Answer description: ' + error.toString());\r\n    }\r\n\r\n    async GenerateCall() {\r\n\r\n        let iceCandidateFinishedResolve ,iceCandidateFinishedReject\r\n        let pack \r\n        const iceCandidateFinishedPromise =  new Promise( function(resolve, reject) { iceCandidateFinishedResolve = resolve ; iceCandidateFinishedReject = reject; } )\r\n\r\n        this.createPeerConnection(iceCandidateFinishedResolve);\r\n        await this.addStream();\r\n        await this.createdOffer();\r\n        let response = await iceCandidateFinishedPromise\r\n        if (response === true) { \r\n            pack = { \r\n                callId :  uuid.v4(),\r\n                callerId : this.Id,\r\n                callerName: this.Name,\r\n                callerSpd : this.localSdp,\r\n                callerIce : this.iceCandidates\r\n            }\r\n        }\r\n        let sentPackJson = JSON.stringify( {...pack, outside:true} );\r\n        pack = { ...pack, outside:false, theme: GetRandomTheme()}\r\n       return [ pack, LZString.compressToBase64(sentPackJson)]\r\n    }\r\n\r\n    async GenerateAnswer(pack) {\r\n        let iceCandidateFinishedResolve ,iceCandidateFinishedReject\r\n        let repack\r\n        const iceCandidateFinishedPromise =  new Promise( function(resolve, reject) { iceCandidateFinishedResolve = resolve ; iceCandidateFinishedReject = reject; } )\r\n        this.createPeerConnection(iceCandidateFinishedResolve);\r\n        await this.addStream();\r\n        await this.setRemoteDescription(pack.callerSpd) \r\n        await this.createAnswer();\r\n        let response = await iceCandidateFinishedPromise\r\n        if (response === true) { \r\n        repack = {\r\n                ...pack,\r\n                receiverId:this.Id,\r\n                receiverName:this.Name,\r\n                receiverSpd:this.localSdp,\r\n                receiverIce:this.iceCandidates,\r\n            }\r\n        }\r\n\r\n        await this.addIceCandidates(pack.callerIce)\r\n\r\n        let sentRepackJson = JSON.stringify(repack)\r\n        repack = { ...repack,  theme: GetRandomTheme()}\r\n        return [ repack, LZString.compressToBase64(sentRepackJson)]\r\n\r\n    }\r\n\r\n}\r\n","import React, { Component, useState, useEffect, useRef } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useRecoilState, useRecoilValue, readOnlySelector } from 'recoil';\r\nimport { RemoteMedia, LocalMedia } from '../recoil/atoms';\r\nimport uuid from \"uuid\";\r\nimport GetRandomTheme from \"../utils/GetRandomTheme\"\r\nimport RtcPc from \"./RtcPc\"\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport LZString from 'lz-string';\r\n\r\n\r\nconst styles = theme => ({\r\n    textField: {\r\n        width: '90%',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        paddingBottom: 0,\r\n        marginTop: 0,\r\n        fontWeight: 500,\r\n        background: 'white',\r\n        color: 'white',\r\n    },\r\n    input: {\r\n        color: 'white',\r\n        background: 'white'\r\n    }\r\n})\r\n\r\nconst CAPTURE_OPTIONS = {\r\n    audio: false,\r\n    video: true,\r\n};\r\n\r\n\r\nconst MenuBar = ({ handleAddRemoteMedia, }) => {\r\n\r\n    const classes = styles();\r\n    const [name, setName] = useState(\"me\")\r\n    const [toSendStr, setToSentStr] = useState(\"\")\r\n    const [recvStr, setRecvStr] = useState(\"\")\r\n\r\n    const [localMedias, setLocalMedia] = useRecoilState(LocalMedia);\r\n    const [remoteMedias, setRemoteMedia] = useRecoilState(RemoteMedia);\r\n    const [media, setMedia] = useState(null)\r\n\r\n\r\n\r\n    const getMedia = async () => {\r\n        const media = await navigator.mediaDevices.getUserMedia({\r\n            audio: false,\r\n            video: true\r\n        });\r\n        setMedia(media);\r\n    }\r\n\r\n    const stopMedia = () => {\r\n        if (media instanceof MediaStream) {\r\n            media.getTracks().forEach(track => track.stop());\r\n        }\r\n        setMedia(null);\r\n    }\r\n\r\n    const HandleStartStopButton = () => {\r\n        if (media instanceof MediaStream) {\r\n            stopMedia();\r\n        } else {\r\n\r\n            getMedia();\r\n        }\r\n    }\r\n\r\n    const HandleLocalMedia = () => {\r\n        if (localMedias.length < 1) {\r\n            let locMedia = {\r\n                id: uuid.v4(),\r\n                name,\r\n                theme: GetRandomTheme(),\r\n                media,\r\n                local: true\r\n            };\r\n            setLocalMedia([locMedia]);\r\n\r\n        } else {\r\n            let temp = localMedias[0]\r\n            setLocalMedia([{ ...temp, name, media }])\r\n        }\r\n        // console.log(localMedias)\r\n    }\r\n\r\n    useEffect(() => HandleLocalMedia(), [name, media])\r\n\r\n    const generate = async (localMedias) => {\r\n        if ((localMedias.length > 0) && (localMedias[0].media)) {\r\n            console.log(localMedias[0].media.constructor.name)\r\n            if (localMedias[0].media.constructor.name === \"MediaStream\") {\r\n                let newPc = new RtcPc(null, localMedias[0], false)\r\n                let [pack, sentPackCompStr] = await newPc.GenerateCall()\r\n                setRemoteMedia([...remoteMedias, { ...pack, RtcPc: newPc, media: newPc.remoteStream }])\r\n                setToSentStr(sentPackCompStr)\r\n                console.log(pack, sentPackCompStr)\r\n            } else {\r\n                alert(\"Click Start and then click generate\")\r\n                console.log(\"Click Start and then click generate\")\r\n            }\r\n        } else {\r\n            alert(\"Click Start and then click generate\")\r\n            console.log(\"Click Start and then click generate\")\r\n        }\r\n    }\r\n\r\n    const HandleGenerateButton = () => {\r\n        // useEffect(() => pc(localMedias), [localMedias])\r\n        generate(localMedias)\r\n        // alert(\"Click Start and then click generate\")\r\n    }\r\n\r\n    const addbutton = async (localMedias, remoteMedias) => {\r\n        let pack = JSON.parse(LZString.decompressFromBase64(recvStr))\r\n        let notExecuteFull = true\r\n        let tempAddRemoteStreamResolver\r\n        let tempAddRemoteStreamPromise = new Promise((resolve, reject) => { tempAddRemoteStreamResolver = resolve })\r\n        remoteMedias.forEach(async (remoteMedia, index) => {\r\n            if (remoteMedia.callerId === pack.callerId) {\r\n                notExecuteFull = false\r\n                remoteMedia.RtcPc.pc.onaddstream = (event) => remoteMedia.RtcPc.handleRemoteStreamAddedWithResolve(event, tempAddRemoteStreamResolver);\r\n                remoteMedia.RtcPc.setRemoteDescription(pack.receiverSpd)\r\n                remoteMedia.RtcPc.addIceCandidates(pack.receiverIce)\r\n                let temp1 = await tempAddRemoteStreamPromise\r\n                if (temp1) {\r\n                    remoteMedia = {\r\n                        ...remoteMedia,\r\n                        recevierId: pack.receiverId,\r\n                        receiverName: pack.receiverName,\r\n                        receiverIce: pack.receiverIce,\r\n                        receiverSpd: pack.receiverSpd,\r\n                        media: remoteMedia.RtcPc.remoteStream\r\n                    }\r\n                    remoteMedias[index] = remoteMedia;\r\n                }\r\n            }\r\n        });\r\n        if (notExecuteFull === false) {\r\n            let temp1 = await tempAddRemoteStreamPromise\r\n            if (temp1) {\r\n                setRemoteMedia(remoteMedias)\r\n            }\r\n        }\r\n        if (notExecuteFull === true) {\r\n            if ((localMedias.length > 0) && (localMedias[0].media)) {\r\n                if (localMedias[0].media.constructor.name === \"MediaStream\") {\r\n                    let newPc = new RtcPc(null, localMedias[0], false)\r\n                    const [repack, sentRepackCompStr] = await newPc.GenerateAnswer(pack)\r\n                    setRemoteMedia([...remoteMedias, { ...repack, RtcPc: newPc, media: newPc.remoteStream }])\r\n                    setToSentStr(sentRepackCompStr)\r\n                    console.log(repack, sentRepackCompStr)\r\n                }\r\n                else {\r\n                    alert(\"Click Start and then click Add\")\r\n                    console.log(\"Click Start and then click Add\")\r\n                }\r\n            } else {\r\n                alert(\"Click Start and then click Add\")\r\n                console.log(\"Click Start and then click Add\")\r\n            }\r\n        }\r\n        console.log(\"Final ..  \", remoteMedias)\r\n    }\r\n\r\n    const HandleAddButton = () => {\r\n        addbutton(localMedias, remoteMedias)\r\n    }\r\n\r\n    return (\r\n        <AppBar position='static'>\r\n            <Toolbar>\r\n                <Grid justify='space-between' container spacing={24}>\r\n                    <Grid item justify='center' alignItems='center'>\r\n                        <Button variant='contained' onClick={() => HandleStartStopButton()} > {media ? \"Stop\" : \"Start\"}  </Button>\r\n                        <TextField\r\n                            id=\"name\"\r\n                            variant=\"filled\"\r\n                            label=\"Name\"\r\n                            className={classes.textField}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            // defaultValue=\"M E\"\r\n                            placeholder=\"Enter your name\"\r\n                            InputProps={{\r\n                                className: classes.input,\r\n                            }}\r\n                        />\r\n                        <Button variant='contained' onClick={() => HandleGenerateButton()}>Generate </Button>\r\n                        <TextareaAutosize\r\n                            aria-label='minimum height'\r\n                            rowsMin={3}\r\n                            rowsMax={4}\r\n                            placeholder=''\r\n                            value={toSendStr}\r\n                        />\r\n                        <CopyToClipboard text={toSendStr}>\r\n                            <Button variant='contained'>Copy </Button>\r\n                        </CopyToClipboard>\r\n                    </Grid>\r\n                    <Grid item justify='center' alignItems='center'>\r\n                        <TextareaAutosize\r\n                            aria-label='minimum height'\r\n                            rowsMin={3}\r\n                            rowsMax={4}\r\n                            placeholder='Paste here'\r\n                            onChange={(e) => { setRecvStr(e.target.value); console.log(recvStr) }}\r\n                            value={recvStr}\r\n                        />\r\n                        <Button variant='contained' onClick={() => { console.log(recvStr); HandleAddButton() }}  >Add </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar >\r\n    )\r\n\r\n}\r\n\r\nexport default MenuBar","import React from 'react';\r\nimport VideoCard from './VideoCard';\r\nimport LocalVideoCard from './LocalVideoCard';\r\nimport RemoteVideoCard from './RemoteVideoCard';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuBar from './MenuBar'\r\nimport { useRecoilState, useRecoilValue , useState} from 'recoil';\r\nimport { RemoteMedia, LocalMedia } from '../recoil/atoms';\r\nimport uuid from \"uuid\";\r\nimport GetRandomTheme from \"../utils/GetRandomTheme\"\r\n\r\n\r\nconst ret_rand = () => {\r\n    return { id: uuid.v4(), name: \"Test Name\", theme: GetRandomTheme() }\r\n}\r\n\r\nexport default function VideoContent() {\r\n    // const [spacing, setSpacing] = useState(5);\r\n    const [remoteMedias, setRemoteMedia] = useRecoilState(RemoteMedia);\r\n    const [localMedias, setLocalMedia] = useRecoilState(LocalMedia);\r\n\r\n\r\n    const HandleRemoveRemoteMedia = (id) => {\r\n        setRemoteMedia((remoteMedias) => remoteMedias.filter(remoteMedia => remoteMedia.id !== id));\r\n    };\r\n    const HandleRemoveLocalMedia = (id) => {\r\n        setLocalMedia((localMedias) => localMedias.filter(localMedia => localMedia.id !== id));\r\n    };\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <MenuBar handleAddRemoteMedia={() => setRemoteMedia([...remoteMedias, ret_rand()])} />\r\n            <div style={{ padding: 30 }}>\r\n                <Grid\r\n                    mt={10}\r\n                    container\r\n                    spacing={12}\r\n                    direction='row'\r\n                    justify='center'\r\n                    alignItems='center'\r\n                >\r\n                    {/* width=\"100%\" height=\"100%\" display=\"flex\" justifyContent=\"center\" alignContent=\"center\" flexWrap=\"wrap\" alignItems=\"center\" */}\r\n                    <Grid\r\n                        item\r\n                        xs={16}\r\n                        md={18}\r\n                        direction='row'\r\n                        justify='center'\r\n                        alignItems='center'\r\n                    >\r\n                        <Grid\r\n                            container\r\n                            direction='row'\r\n                            justify='center'\r\n                            alignItems='center'\r\n                            spacing={12}\r\n                        >\r\n                            {localMedias.map((localMedia) => (\r\n                                <Grid key={2} item>\r\n                                    <LocalVideoCard\r\n                                        id={localMedia.id}\r\n                                        HandleRemoveRemoteMedia ={HandleRemoveLocalMedia}\r\n                                        content={localMedia} \r\n                                    />\r\n                                </Grid>\r\n                            ))} \r\n                            \r\n                            {remoteMedias.map((remoteMedia) => (\r\n                                <Grid key={2} item>\r\n                                    <RemoteVideoCard\r\n                                        id={remoteMedia.callId}\r\n                                        HandleRemoveRemoteMedia ={HandleRemoveRemoteMedia}\r\n                                        content={remoteMedia} \r\n                                    />\r\n                                </Grid>\r\n                            ))}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { RecoilRoot } from 'recoil';\n\nimport Main from './components/Main';\n\nfunction App() {\n  const [spacing] = React.useState(5);\n  return (\n    <RecoilRoot>\n      <div>\n        <Main />\n      </div>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}